name: Step 2 - Summon Your First Oracle

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  actions: write
  issues: write
  models: read

env:
  STEP_3_FILE: ".github/steps/3-call-second-oracle.md"
  DISPLAY_LANGUAGE: "pt-BR"

jobs:
  find-workshop-issue:
    name: Find the workshop issue
    uses: lufomatics/reusable-workshops/.github/workflows/find-workshop-issue.yaml@v0.2.1
    with:
      issue-title-text: "Workshop"

  consult-oracle:
    name: Ask the first oracle
    runs-on: ubuntu-latest
    needs: [find-workshop-issue]
    if: |
      !github.event.repository.is_template &&
      github.event.issue.pull_request == null &&
      needs.find-workshop-issue.outputs.issue-number == github.event.issue.number &&
      github.event.sender.login == github.repository_owner &&
      (
        contains(github.event.comment.body, '/o3ceratops') ||
        contains(github.event.comment.body, '@o3ceratops') ||
        contains(github.event.comment.body, '/anthropiclaudio') ||
        contains(github.event.comment.body, '@anthropiclaudio')
      )

    steps:
      - name: Interpretar o comando
        id: parse-command
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment.body.toLowerCase();
            const original = context.payload.comment.body;
            const triggers = [
              {
                tag: 'o3ceratops',
                markers: ['/o3ceratops', '@o3ceratops'],
                model: 'openai/gpt-4.1',
                display: 'GPT-4.1'
              },
              {
                tag: 'anthropiclaudio',
                markers: ['/anthropiclaudio', '@anthropiclaudio'],
                model: 'openai/gpt-4o',
                display: 'GPT-4o'
              }
            ];

            const invocation = triggers.find(option => option.markers.some(marker => body.includes(marker)));

            if (!invocation) {
              core.setFailed('Nenhum or√°culo reconhecido no coment√°rio.');
              return;
            }

            const prompt = `You are responding inside the repository ${context.repo.owner}/${context.repo.repo}. ` +
              `This workshop, called \"Crossing The Bridge\", teaches AI-driven continuous development by orchestrating issues, ` +
              `GitHub Actions workflows stored in .github/workflows, and instructional guides in .github/steps. ` +
              `Explain in two short paragraphs what insight you want the participant to take from this stage and how they can explore ` +
              `the repository or Codespace to reinforce the idea. Use actionable language. Answer in ${{ env.DISPLAY_LANGUAGE }}. `;

            const usedCommand = invocation.markers.find(marker => original.includes(marker)) ?? invocation.markers[0];

            core.setOutput('model', invocation.model);
            core.setOutput('tag', invocation.tag);
            core.setOutput('display', invocation.display);
            core.setOutput('command', usedCommand);
            core.setOutput('prompt', prompt);

      - name: Checkout
        uses: actions/checkout@v4

      - name: Atualizar status no README
        run: |
          python - <<'PY'
          from pathlib import Path

          status = "üß† Primeiro or√°culo consultado. Chame o guardi√£o restante para completar a vis√£o."
          path = Path('README.md')
          text = path.read_text()
          start = '<!--WORKSHOP_STATUS-->'
          end = '<!--END_WORKSHOP_STATUS-->'
          if start not in text or end not in text:
              raise SystemExit('Workshop status markers not found in README.md')
          prefix, _, rest = text.partition(start)
          _, _, suffix = rest.partition(end)
          path.write_text(f"{prefix}{start}{status}{end}{suffix}")
          PY

      - name: Commit status update
        uses: EndBug/add-and-commit@v9
        continue-on-error: true
        with:
          add: README.md
          message: "workshop status: aguardando segundo oraculo"
          default_author: github_actions
          pull: --rebase --autostash

      - name: Consultar modelo de IA
        id: ai-response
        uses: actions/ai-inference@v1
        with:
          system-prompt: |
            You are the bridge oracle guiding a workshop participant through AI-driven continuous delivery practices.
            Keep the tone motivational and clear.
          prompt: ${{ steps.parse-command.outputs.prompt }}
          model: ${{ steps.parse-command.outputs.model }}

      - name: Construir coment√°rio do or√°culo
        env:
          RESPONSE: ${{ steps.ai-response.outputs.response }}
          DISPLAY: ${{ steps.parse-command.outputs.display }}
          COMMAND: ${{ steps.parse-command.outputs.command }}
          SENDER: ${{ github.event.sender.login }}
        run: |
          python - <<'PY'
          import os
          from pathlib import Path

          response = os.environ['RESPONSE'].strip()
          display = os.environ['DISPLAY']
          command = os.environ['COMMAND']
          sender = os.environ['SENDER']

          body = f"### Crossing The Bridge ‚Ä¢ {display}\n"
          body += f"**Invocador:** @{sender}\n"
          body += f"**Comando:** `{command}`\n\n"
          body += f"{response}\n"

          Path('oracle-comment.md').write_text(body)
          PY

      - name: Publicar vis√£o do or√°culo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_URL: ${{ needs.find-workshop-issue.outputs.issue-url }}
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file oracle-comment.md

      - name: Compartilhar pr√≥xima etapa
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_URL: ${{ needs.find-workshop-issue.outputs.issue-url }}
        run: |
          gh issue comment "$ISSUE_URL" \
            --body-file "$STEP_3_FILE"

      - name: Alternar workflows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow enable "Step 3 - Call The Second Oracle"
          gh workflow disable "Step 2 - Summon Your First Oracle"
